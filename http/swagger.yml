openapi: "3.0.0"
info:
  title: Gateway Service
  version: 0.1.0
servers:
  - url: /v1
paths:
  /cells:
    post:
      tags:
        - Cells
      summary: Create a cell
      requestBody:
          description: cell to create
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cell"
      responses:
        '201':
          description: Added cell
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cell"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      tags:
        - Cells
      summary: Get all cells
      parameters:
        - in: query
          name: organization
          schema:
            type: string
          description: filter for dashboards belonging to a particular organization
        - in: query
          name: organizationID
          schema:
            type: string
          description: filter for dashboards belonging to a particular organizationID
        - in: query
          name: user
          schema:
            type: string
          description: filter for dashboards belonging to a particular user
        - in: query
          name: userID
          schema:
            type: string
          description: filter for dashboards belonging to a particular userID
      responses:
        '200':
          description: all cells
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cells"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  '/cells/{cellID}':
   get:
    tags:
      - Cells
    summary: Get a single Cell
    parameters:
        - in: path
          name: cellID
          schema:
            type: string
          required: true
          description: ID of cell to update
    responses:
        '200':
          description: get a single cell
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cell"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
   patch:
      tags:
        - Cells
      summary: Update a single cell
      requestBody:
          description: patching of a cell
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cell"
      parameters:
        - in: path
          name: cellID
          schema:
            type: string
          required: true
          description: ID of cell to update
      responses:
        '200':
          description: Updated cell
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cell"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
   delete:
      tags:
        - Cells
      summary: Delete a cell
      parameters:
        - in: path
          name: cellID
          schema:
            type: string
          required: true
          description: ID of cell to update
      responses:
        '202':
          description: delete has been accepted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /dashboards:
    post:
      tags:
        - Dashboards
      summary: Create a dashbaord
      requestBody:
        description: dashboard to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Dashboard"
      responses:
        '201':
          description: Dashboard created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dashboard"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      tags:
        - Dashboards
      summary: List all dashboards
      parameters:
        - in: query
          name: organization
          schema:
            type: string
          description: filter for dashboards belonging to a particular organization
        - in: query
          name: organizationID
          schema:
            type: string
          description: filter for dashboards belonging to a particular organizationID
        - in: query
          name: user
          schema:
            type: string
          description: filter for dashboards belonging to a particular user
        - in: query
          name: userID
          schema:
            type: string
          description: filter for dashboards belonging to a particular userID
      responses:
        '200':
         description: a list of dashboards
         content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dashboards"
        default:
          description: unexpected error
          content:
           application/json:
             schema:
               $ref: "#/components/schemas/Error"
  '/dashboards/{dashboardID}':
    get:
      tags:
        - Dashboards
      summary: Get a dashboard by id
      parameters:
        - in: path
          name: dashboardID
          schema:
            type: string
          required: true
          description: ID of dashboard to get
      responses:
        '200':
          description: a dashboard
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dashboard"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - Dashboards
      summary: Delete a dashboard
      parameters:
        - in: path
          name: dashboardID
          schema:
            type: string
          required: true
          description: ID of dashboard to delete
      responses:
        '202':
          description: delete has been accepted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags:
        - Dashboards
      summary: Update a dashboard
      requestBody:
        description: dashboard update to apply
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Dashboard"
      parameters:
        - in: path
          name: dashboardID
          schema:
            type: string
          required: true
          description: ID of dashboard to update
      responses:
        '200':
          description: An updated dashboard
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dashboard"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /buckets:
    get:
      tags:
        - Buckets
      summary: List all buckets
      responses:
        '200':
          description: a list of buckets
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Buckets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - Buckets
      summary: Create a bucket
      requestBody:
        description: bucket to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Bucket"
      responses:
        '201':
          description: Bucket created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bucket"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  '/buckets/{bucketId}':
    get:
      tags:
        - Buckets
      summary: Retrieve a bucket
      parameters:
        - in: path
          name: bucketId
          schema:
            type: string
          required: true
          description: ID of bucket to get
      responses:
        '200':
          description: bucket details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bucket"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags:
        - Buckets
      summary: Update a bucket
      requestBody:
        description: bucket update to apply
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Bucket"
      parameters:
        - in: path
          name: bucketId
          schema:
            type: string
          required: true
          description: ID of bucket to update
      responses:
        '200':
          description: An updated bucket
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bucket"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /orgs:
    get:
      tags:
        - Organizations
      summary: List all organizations
      responses:
        '200':
          description: A list of organizations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organizations"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - Organizations
      summary: Create an organization
      requestBody:
        description: organization to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organization"
      responses:
        '201':
          description: organization created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  '/orgs/{orgId}':
    get:
      tags:
        - Organizations
      summary: Retrieve an organization
      parameters:
        - in: path
          name: orgId
          schema:
            type: string
          required: true
          description: ID of organization to get
      responses:
        '200':
          description: organization details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags:
        - Organizations
      summary: Update an organization
      requestBody:
        description: organization update to apply
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organization"
      parameters:
        - in: path
          name: orgId
          schema:
            type: string
          required: true
          description: ID of organization to get
      responses:
        '200':
          description: organization updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /tasks:
    get:
      tags:
        - Tasks
      summary: List tasks.
      description: Lists tasks, limit 100
      parameters:
        - in: query
          name: after
          schema:
            type: string
          description: returns tasks after specified ID
        - in: query
          name: user
          schema:
            type: string
          description: filter tasks to a specific user id
        - in: query
          name: organization
          schema:
            type: string
          description: filter tasks to a specific organization id
      responses:
        '200':
          description: A list of tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  runs:
                    type: array
                    items:
                      $ref: "#/components/schemas/Tasks"
                  links:
                    $ref: "#/components/schemas/Links"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - Tasks
      summary: Create a new task
      requestBody:
        description: task to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        '201':
          description: Task created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  '/tasks/{taskId}':
    get:
      tags:
        - Tasks
      summary: Retrieve an task
      parameters:
        - in: path
          name: taskId
          schema:
            type: string
          required: true
          description: ID of task to get
      responses:
        '200':
          description: task details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags:
        - Tasks
      summary: Update a task
      description: Update a task. This will cancel all queued runs.
      requestBody:
        description: task update to apply
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      parameters:
        - in: path
          name: taskId
          schema:
            type: string
          required: true
          description: ID of task to get
      responses:
        '200':
          description: task updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - Tasks
      summary: Delete a task
      description: Deletes a task and all associated records
      parameters:
        - in: path
          name: taskId
          schema:
            type: string
          required: true
          description: ID of task to delete
      responses:
        '204':
          description: task deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  '/tasks/{taskId}/runs':
    get:
      tags:
        - Tasks
      summary: Retrieve list of run records for a task
      parameters:
        - in: path
          name: taskId
          schema:
            type: string
          required: true
          description: ID of task to get runs for
        - in: query
          name: after
          schema:
            type: string
          description: returns runs after specified ID
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: the number of runs to return
        - in: query
          name: afterTime
          schema:
            type: string
          description: filter runs to those queued after this time
        - in: query
          name: beforeTime
          schema:
            type: string
          description: filter runs to those queued before this time
      responses:
        '200':
          description: a list of task runs
          content:
            application/json:
              schema:
                type: object
                properties:
                  runs:
                    type: array
                    items:
                      $ref: "#/components/schemas/Run"
                  links:
                    $ref: "#/components/schemas/Links"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  '/tasks/{taskId}/runs/{runId}':
    get:
      tags:
        - Tasks
      summary: Retrieve a single run record for a task
      parameters:
        - in: path
          name: taskId
          schema:
            type: string
          required: true
          description: task ID
        - in: path
          name: runId
          schema:
            type: string
          required: true
          description: run ID
      responses:
        '200':
          description: The run record
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Run"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  '/tasks/{taskId}/runs/{runId}/retry':
    post:
      tags:
        - Tasks
      summary: Retry a task run
      parameters:
        - in: path
          name: taskId
          schema:
            type: string
          required: true
          description: task ID
        - in: path
          name: runId
          schema:
            type: string
          required: true
          description: run ID
      responses:
        '200':
          description: The newly created retry run
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Run"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  '/tasks/{taskId}/logs':
    get:
      tags:
        - Tasks
      summary: Retrieve all logs for a task
      parameters:
        - in: path
          name: taskId
          schema:
            type: string
          required: true
          description: ID of task to get logs for
        - in: query
          name: run
          schema:
            type: string
          description: Filters logs to a specific run.
      responses:
        '200':
          description: all logs for a task
          content:
            application/json:
              schema:
                type: object
                properties:
                  logs:
                    type: array
                    items:
                      $ref: "#/components/schemas/Link"
  /users:
    get:
      tags:
        - Users
      summary: List all users
      responses:
        '200':
          description: a list of users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - Users
      summary: Create a user
      requestBody:
        description: user to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        '201':
          description: user created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  '/users/{userId}':
    get:
      tags:
        - Users
      summary: Retrieve a user
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: ID of user to get
      responses:
        '200':
          description: user details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags:
        - Users
      summary: Update a user
      requestBody:
        description: user update to apply
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: ID of user to update
      responses:
        '200':
          description: user updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Bucket:
      properties:
        id:
          readOnly: true
          type: string
        organizationId:
          type: string
        name:
          type: string
        retentionPeriod:
          type: integer
          format: int64
      required: [organizationId, name, retentionPeriod]
    Buckets:
      type: array
      items:
        $ref: "#/components/schemas/Bucket"
    Link:
      type: object
      readOnly: true
      description: URI of resource.
      properties:
        href:
          type: string
          format: url
      required: [href]
    Links:
      type: object
      properties:
        next:
          $ref: "#/components/schemas/Link"
        self:
          $ref: "#/components/schemas/Link"
        prev:
          $ref: "#/components/schemas/Link"
      required: [self]
    ChronografVisualization:
      properties:
        cached:
          type: boolean
        query:
          type: string
        type:
          type: string
          enum: ["common"]
    VegaLiteVisualization:
      properties:
        vega_properties:
          type: object
        type:
          type: string
          enum: ["vegalite"]
    MarkdownVisualization:
      properties:
        markdown:
          type: string
        type:
          type: string
          enum: ["markdown"]
    Cell:
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        visualization:
          oneOf:
            - $ref: "#/components/schemas/ChronografVisualization"
            - $ref: "#/components/schemas/VegaLiteVisualization"
            - $ref: "#/components/schemas/MarkdownVisualization"
    Cells:
      type: array
      items:
        $ref: "#/components/schemas/Cell"
    DashboardCell:
      properties:
        cell:
          $ref: "#/components/schemas/Link"
        x:
          type: integer
          format: int32
        y:
          type: integer
          format: int32
        w:
          type: integer
          format: int32
        h:
          type: integer
          format: int32
    Dashboard:
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        cells:
          type: array
          items:
            $ref: "#/components/schemas/DashboardCell"
    Dashboards:
      type: array
      items:
        $ref: "#/components/schemas/Dashboard"
    Organization:
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
      required: [name]
    Organizations:
      type: array
      items:
        $ref: "#/components/schemas/Organization"
    Run:
      properties:
        id:
          readOnly: true
          type: string
        status:
          type: string
          enum: [
            "queued",
            "executing",
            "failed",
            "success"
          ]
        queuedAt:
          readOnly: true
          type: string
          format: dateTime
        startTime:
          readOnly: true
          type: string
          format: dateTime
        endTime:
          readOnly: true
          type: string
          format: dateTime
        error:
          $ref: "#/components/schemas/Error"
        log:
          readOnly: true
          description: A url to a relevant log.
          type: string
      required: [queuedAt, status]
    Task:
      properties:
        id:
          readOnly: true
          type: string
        name:
          description: A modifiable description of the task.
          type: string
        status:
          description: The current status of the task. When updated to 'disabled', cancels all queued jobs of this task.
          type: string
          enum: [
            "enabled",
            "disabled"
          ]
        owner:
          $ref: "#/components/schemas/User"
        ifql:
          description: The ifql to run for this task.
          type: string
        every:
          readOnly: true
          description: A simple task repetition schedule; parsed from ifql.
          type: string
        cron:
          readOnly: true
          description: A task repetition schedule in the form '* * * * * *'; parsed from ifql.
          type: string
        last:
          $ref: "#/components/schemas/Run"
    Tasks:
      type: array
      items:
        $ref: "#/components/schemas/Task"
    User:
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
      required: [name]
    Users:
      type: array
      items:
        $ref: "#/components/schemas/User"
    Error:
      properties:
        code:
          readOnly: true
          type: integer
          format: int32
        message:
          readOnly: true
          type: string
      required: [code, message]

