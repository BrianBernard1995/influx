// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: meta.proto

/*
	Package backend is a generated protocol buffer package.

	It is generated from these files:
		meta.proto

	It has these top-level messages:
		StoreTaskMeta
		StoreTaskMetaRun
*/
package backend

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// StoreTaskMeta is the internal state of a task.
type StoreTaskMeta struct {
	MaxConcurrency int32 `protobuf:"varint,1,opt,name=max_concurrency,json=maxConcurrency,proto3" json:"max_concurrency,omitempty"`
	// last_completed is a unix time stamp of the last completed run.
	LastCompleted    int64               `protobuf:"varint,2,opt,name=last_completed,json=lastCompleted,proto3" json:"last_completed,omitempty"`
	Status           string              `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	CurrentlyRunning []*StoreTaskMetaRun `protobuf:"bytes,4,rep,name=currently_running,json=currentlyRunning" json:"currently_running,omitempty"`
}

func (m *StoreTaskMeta) Reset()                    { *m = StoreTaskMeta{} }
func (m *StoreTaskMeta) String() string            { return proto.CompactTextString(m) }
func (*StoreTaskMeta) ProtoMessage()               {}
func (*StoreTaskMeta) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{0} }

func (m *StoreTaskMeta) GetMaxConcurrency() int32 {
	if m != nil {
		return m.MaxConcurrency
	}
	return 0
}

func (m *StoreTaskMeta) GetLastCompleted() int64 {
	if m != nil {
		return m.LastCompleted
	}
	return 0
}

func (m *StoreTaskMeta) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *StoreTaskMeta) GetCurrentlyRunning() []*StoreTaskMetaRun {
	if m != nil {
		return m.CurrentlyRunning
	}
	return nil
}

type StoreTaskMetaRun struct {
	// now represents a unix timestamp
	Now   int64  `protobuf:"varint,1,opt,name=now,proto3" json:"now,omitempty"`
	Try   uint32 `protobuf:"varint,2,opt,name=try,proto3" json:"try,omitempty"`
	RunID []byte `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
}

func (m *StoreTaskMetaRun) Reset()                    { *m = StoreTaskMetaRun{} }
func (m *StoreTaskMetaRun) String() string            { return proto.CompactTextString(m) }
func (*StoreTaskMetaRun) ProtoMessage()               {}
func (*StoreTaskMetaRun) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{1} }

func (m *StoreTaskMetaRun) GetNow() int64 {
	if m != nil {
		return m.Now
	}
	return 0
}

func (m *StoreTaskMetaRun) GetTry() uint32 {
	if m != nil {
		return m.Try
	}
	return 0
}

func (m *StoreTaskMetaRun) GetRunID() []byte {
	if m != nil {
		return m.RunID
	}
	return nil
}

func init() {
	proto.RegisterType((*StoreTaskMeta)(nil), "com.influxdata.platform.task.backend.StoreTaskMeta")
	proto.RegisterType((*StoreTaskMetaRun)(nil), "com.influxdata.platform.task.backend.StoreTaskMetaRun")
}
func (m *StoreTaskMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreTaskMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxConcurrency != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.MaxConcurrency))
	}
	if m.LastCompleted != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.LastCompleted))
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if len(m.CurrentlyRunning) > 0 {
		for _, msg := range m.CurrentlyRunning {
			dAtA[i] = 0x22
			i++
			i = encodeVarintMeta(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *StoreTaskMetaRun) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreTaskMetaRun) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Now != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Now))
	}
	if m.Try != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Try))
	}
	if len(m.RunID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.RunID)))
		i += copy(dAtA[i:], m.RunID)
	}
	return i, nil
}

func encodeVarintMeta(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *StoreTaskMeta) Size() (n int) {
	var l int
	_ = l
	if m.MaxConcurrency != 0 {
		n += 1 + sovMeta(uint64(m.MaxConcurrency))
	}
	if m.LastCompleted != 0 {
		n += 1 + sovMeta(uint64(m.LastCompleted))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	if len(m.CurrentlyRunning) > 0 {
		for _, e := range m.CurrentlyRunning {
			l = e.Size()
			n += 1 + l + sovMeta(uint64(l))
		}
	}
	return n
}

func (m *StoreTaskMetaRun) Size() (n int) {
	var l int
	_ = l
	if m.Now != 0 {
		n += 1 + sovMeta(uint64(m.Now))
	}
	if m.Try != 0 {
		n += 1 + sovMeta(uint64(m.Try))
	}
	l = len(m.RunID)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	return n
}

func sovMeta(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMeta(x uint64) (n int) {
	return sovMeta(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StoreTaskMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreTaskMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreTaskMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxConcurrency", wireType)
			}
			m.MaxConcurrency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxConcurrency |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCompleted", wireType)
			}
			m.LastCompleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastCompleted |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentlyRunning", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentlyRunning = append(m.CurrentlyRunning, &StoreTaskMetaRun{})
			if err := m.CurrentlyRunning[len(m.CurrentlyRunning)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreTaskMetaRun) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreTaskMetaRun: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreTaskMetaRun: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Now", wireType)
			}
			m.Now = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Now |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Try", wireType)
			}
			m.Try = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Try |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunID = append(m.RunID[:0], dAtA[iNdEx:postIndex]...)
			if m.RunID == nil {
				m.RunID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMeta(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMeta
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMeta
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMeta(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMeta = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMeta   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("meta.proto", fileDescriptorMeta) }

var fileDescriptorMeta = []byte{
	// 323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0x31, 0x4e, 0xf3, 0x30,
	0x1c, 0xc5, 0x3f, 0x7f, 0xa1, 0x45, 0x35, 0xb4, 0x94, 0x0c, 0x28, 0x30, 0x84, 0xa8, 0x02, 0x91,
	0x05, 0x57, 0x02, 0x89, 0x03, 0xb4, 0x2c, 0x1d, 0x58, 0x0c, 0x03, 0x62, 0x89, 0x1c, 0xc7, 0x0d,
	0x51, 0x63, 0xbb, 0x72, 0xfe, 0x16, 0xed, 0x2d, 0x38, 0x16, 0x23, 0x07, 0x40, 0x08, 0x85, 0x8b,
	0xa0, 0xb8, 0x05, 0x04, 0x13, 0xdb, 0x7b, 0x3f, 0xd9, 0x4f, 0xef, 0xfd, 0x31, 0x96, 0x02, 0x18,
	0x99, 0x1b, 0x0d, 0xda, 0x3f, 0xe2, 0x5a, 0x92, 0x42, 0x4d, 0x4b, 0xbb, 0xc8, 0x58, 0x43, 0x4b,
	0x06, 0x53, 0x6d, 0x24, 0x01, 0x56, 0xcd, 0x48, 0xca, 0xf8, 0x4c, 0xa8, 0xec, 0xe0, 0x34, 0x2f,
	0xe0, 0xde, 0xa6, 0x84, 0x6b, 0x39, 0xcc, 0x75, 0xae, 0x87, 0xee, 0x73, 0x6a, 0xa7, 0xce, 0x39,
	0xe3, 0xd4, 0x2a, 0x74, 0xf0, 0x82, 0x70, 0xf7, 0x1a, 0xb4, 0x11, 0x37, 0xac, 0x9a, 0x5d, 0x09,
	0x60, 0xfe, 0x09, 0xde, 0x91, 0x6c, 0x91, 0x70, 0xad, 0xb8, 0x35, 0x46, 0x28, 0xbe, 0x0c, 0x50,
	0x84, 0xe2, 0x16, 0xed, 0x49, 0xb6, 0x18, 0x7f, 0x53, 0xff, 0x18, 0xf7, 0x4a, 0x56, 0x41, 0xc2,
	0xb5, 0x9c, 0x97, 0x02, 0x44, 0x16, 0xfc, 0x8f, 0x50, 0xec, 0xd1, 0x6e, 0x43, 0xc7, 0x9f, 0xd0,
	0xdf, 0xc3, 0xed, 0x0a, 0x18, 0xd8, 0x2a, 0xf0, 0x22, 0x14, 0x77, 0xe8, 0xda, 0xf9, 0x1c, 0xef,
	0xae, 0xa2, 0xa0, 0x5c, 0x26, 0xc6, 0x2a, 0x55, 0xa8, 0x3c, 0xd8, 0x88, 0xbc, 0x78, 0xeb, 0xec,
	0x82, 0xfc, 0x65, 0x2a, 0xf9, 0xd1, 0x9b, 0x5a, 0x45, 0xfb, 0x5f, 0x81, 0x74, 0x95, 0x37, 0xb8,
	0xc5, 0xfd, 0xdf, 0xaf, 0xfc, 0x3e, 0xf6, 0x94, 0x7e, 0x70, 0xa3, 0x3c, 0xda, 0xc8, 0x86, 0x80,
	0x59, 0xba, 0xfa, 0x5d, 0xda, 0x48, 0x3f, 0xc2, 0x6d, 0x63, 0x55, 0x52, 0x64, 0xae, 0xf4, 0xf6,
	0xa8, 0x53, 0xbf, 0x1e, 0xb6, 0xa8, 0x55, 0x93, 0x4b, 0xda, 0x32, 0x56, 0x4d, 0xb2, 0xd1, 0xfe,
	0x53, 0x1d, 0xa2, 0xe7, 0x3a, 0x44, 0x6f, 0x75, 0x88, 0x1e, 0xdf, 0xc3, 0x7f, 0x77, 0x9b, 0xeb,
	0x5e, 0x69, 0xdb, 0x9d, 0xf6, 0xfc, 0x23, 0x00, 0x00, 0xff, 0xff, 0x66, 0x80, 0xc1, 0x72, 0xbd,
	0x01, 0x00, 0x00,
}
